{"version":3,"sources":["components/Header.js","components/AddBook.js","components/BookContent.js","components/BookBtns.js","components/Book.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","type","placeholder","onChange","this","props","updateQuery","Component","AddBook","state","title","author","pages","isDisabled","e","setState","target","name","value","onSubmit","preventDefault","addBook","disabled","BookContent","BookBtns","onClick","toggleRead","book","id","read","removeBook","Book","BookList","books","map","key","App","uuid","query","prevState","filter","b","booksCpy","idx","findIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86cfaa37.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"library-header\">\r\n          <div className=\"logo\">\r\n            <img src=\"logo32.png\" alt=\"Page Logo\" />\r\n          </div>\r\n          <h1 className=\"header-title\">My Library</h1>\r\n          <input\r\n            className=\"search-books\"\r\n            type=\"text\"\r\n            placeholder=\"Search for book...\"\r\n            onChange={this.props.updateQuery}\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nexport class AddBook extends Component {\r\n  state = {\r\n    title: '',\r\n    author: '',\r\n    pages: '',\r\n  };\r\n\r\n  isDisabled = () => {\r\n    const { title, author, pages } = this.state;\r\n    if (title === '' || author === '' || pages === '') return true;\r\n    else return false;\r\n  };\r\n\r\n  updateQuery = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { title, author, pages } = this.state;\r\n    this.props.addBook(title, author, pages);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input\r\n          name=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          onChange={this.updateQuery}\r\n        />\r\n        <input\r\n          name=\"author\"\r\n          type=\"text\"\r\n          placeholder=\"Author\"\r\n          onChange={this.updateQuery}\r\n        />\r\n        <input\r\n          name=\"pages\"\r\n          type=\"number\"\r\n          placeholder=\"No. of pages\"\r\n          onChange={this.updateQuery}\r\n        />\r\n        <button disabled={this.isDisabled()}>Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddBook;\r\n","import React, { Component } from 'react';\r\n\r\nexport class BookContent extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>{this.props.title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookContent;\r\n","import React, { Component } from 'react';\r\n\r\nexport class BookBtns extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"book-read-btn\"\r\n          onClick={() => this.props.toggleRead(this.props.book.id)}\r\n        >\r\n          {this.props.book.read ? 'Read' : 'Not Read'}\r\n        </button>\r\n        <button\r\n          className=\"book-del-btn\"\r\n          onClick={() => this.props.removeBook(this.props.book.id)}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookBtns;\r\n","import React, { Component } from 'react';\r\nimport BookContent from './BookContent';\r\nimport BookBtns from './BookBtns';\r\n\r\nexport class Book extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"book\">\r\n        <BookContent title={this.props.title} />\r\n        <BookBtns\r\n          toggleRead={this.props.toggleRead}\r\n          removeBook={this.props.removeBook}\r\n          book={this.props.book}\r\n          read={this.props.book.read}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Book;\r\n","import React, { Component } from 'react';\r\nimport Book from './Book';\r\n\r\nexport class BookList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.books.map((book) => (\r\n          <Book\r\n            key={book.id}\r\n            title={book.title}\r\n            toggleRead={this.props.toggleRead}\r\n            removeBook={this.props.removeBook}\r\n            book={book}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookList;\r\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport AddBook from './components/AddBook';\nimport BookList from './components/BookList';\nimport { uuid } from 'uuidv4';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    books: [\n      {\n        id: uuid(),\n        title: 'Lord of the Rings',\n        author: 'J.R.R Tolkien',\n        pages: 597,\n        read: false,\n      },\n    ],\n    query: '',\n  };\n\n  updateQuery = (e) => {\n    this.setState({\n      query: e.target.value,\n    });\n  };\n\n  addBook = (title, author, pages) => {\n    this.setState((prevState) => ({\n      books: [\n        ...prevState.books,\n        { id: uuid(), title, author, pages, read: false },\n      ],\n    }));\n  };\n\n  removeBook = (id) => {\n    this.setState((prevState) => ({\n      books: prevState.books.filter((b) => b.id !== id),\n    }));\n  };\n\n  // Changing the state of a property on an individual object was harder than I thought\n  // => You need to first create a copy of the state you are changing, modify it, then replace in the current state\n  toggleRead = (id) => {\n    const booksCpy = this.state.books;\n    const idx = booksCpy.findIndex((b) => b.id === id);\n    booksCpy[idx].read = !booksCpy[idx].read;\n    this.setState({\n      books: booksCpy,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header updateQuery={this.updateQuery} />\n        <AddBook addBook={this.addBook} />\n        <BookList\n          books={this.state.books}\n          toggleRead={this.toggleRead}\n          removeBook={this.removeBook}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}